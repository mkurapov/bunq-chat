{"version":3,"sources":["assets/logo.png","const.js","components/Avatar.js","components/Message.js","utils.js","containers/Chat.js","containers/Login.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","API_ENDPOINT","CONVERSATION_ID","BUNQ_COLORS","Avatar","props","allUsers","useContext","UserContext","userId","userName","find","u","id","name","userColor","className","style","Message","user","msg","senderId","key","message","jumpToBottom","window","scrollTo","document","body","scrollHeight","Chat","useState","messages","setMessages","messageValue","setMessageValue","lastMessageId","setLastMessageId","useEffect","fetch","then","res","json","data","length","sortedMessages","sort","a","b","pollingMessages","setInterval","m","catch","console","error","clearInterval","Fragment","onSubmit","ev","event","preventDefault","newMessage","url","method","JSON","stringify","onSendMessage","type","value","onChange","target","map","i","Login","setUser","setAllUsers","getColorForUser","onClick","src","require","React","createContext","Boolean","location","hostname","match","ReactDOM","render","Provider","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f1ce4eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.eb9aa403.png\";","export const API_ENDPOINT = 'http://assignment.bunq.com';\nexport const CONVERSATION_ID = 2232;\nexport const BUNQ_COLORS = ['#6f42c1', '#007bff', '#28a745', '#dc3545', '#FFC107'];","import React, {useContext} from \"react\";\nimport { UserContext } from '../containers/App';\nimport { BUNQ_COLORS } from \"../const\";\n\nexport default function Avatar(props) {\n    let { allUsers } = useContext(UserContext);\n    let userId = props.userId;\n\n    let userName = allUsers.find(u => u.id === userId).name;\n    let userColor = BUNQ_COLORS[userId-1] ? BUNQ_COLORS[userId-1] : 'black';\n\n    return (<span className=\"avatar\" style={{ 'backgroundColor' : userColor }}>{ userName[0] }</span>);\n}\n\n\n","import React, {useContext} from \"react\";\nimport { UserContext } from '../containers/App';\nimport Avatar from \"./Avatar\";\n\nexport default function Message(props) {\n    let  { user } = useContext(UserContext);\n    let msg = props.msg;\n    let isOwner = msg.senderId === user.id;\n\n    return isOwner ? \n            <div className=\"message-wrap\">\n              <span className=\"message message--sender\" key={msg.id}>\n                {msg.message}\n              </span>\n            </div>\n              :\n            <div className=\"message-wrap\">\n              <div className=\"message__avatar\">\n                <Avatar userId={ msg.senderId }></Avatar>\n              </div>\n              <span className=\"message\" key={msg.id}>\n                {msg.message}\n              </span>\n            </div>\n}\n\n\n","export function jumpToBottom() {\n    window.scrollTo(0,document.body.scrollHeight);\n}","import React, { useState, useContext, useEffect } from \"react\";\nimport Message from \"../components/Message\";\nimport { jumpToBottom } from \"../utils\";\n\nimport { UserContext } from './App';\nimport { API_ENDPOINT, CONVERSATION_ID } from \"../const\";\nimport Avatar from \"../components/Avatar\";\n\nfunction Chat() {\n    const [ messages, setMessages ] = useState([]);\n    const [ messageValue, setMessageValue ] = useState('');\n    const [ lastMessageId, setLastMessageId ] = useState('');\n\n    const { user } = useContext(UserContext);\n    \n    useEffect( () => {\n      fetchInitialMessages()\n    }, [])\n\n    //poll new messages every 3s, and update if new messages arrive\n    useEffect( () => {\n      let pollingMessages = setInterval(() => getNewMessages(), 3000);\n      return () => clearInterval(pollingMessages);\n    }, [lastMessageId])\n\n    function getNewMessages() {\n      if (lastMessageId) {\n        fetch(`${API_ENDPOINT}/conversation/${CONVERSATION_ID}/new/${lastMessageId}`)\n          .then(res => res.json())\n          .then(res => { \n            if (res.length > 0) {\n              setMessages(m => [...m, ...res]);\n              setLastMessageId(res[res.length-1].id);\n              jumpToBottom();\n            }\n          })\n          .catch(() => {\n            console.error(\"UNABLE TO GET NEW MESSAGES\");\n          });\n      }\n    }\n\n    function fetchInitialMessages() {\n      fetch(`${API_ENDPOINT}/conversation/${CONVERSATION_ID}/message/limited?limit=10&offset=0`)\n      .then(res => res.json())\n      .then(data => {\n        if (data.length > 0) {\n            let sortedMessages = data.sort((a, b) => a.id - b.id );\n            setLastMessageId(sortedMessages[sortedMessages.length - 1].id);\n            setMessages(sortedMessages);\n            jumpToBottom();\n        }\n      });\n    }\n  \n    function onSendMessage(event) {\n      event.preventDefault();\n      if (!messageValue) {\n        return;\n      }\n\n      let newMessage = {\n        'message': messageValue,\n        'senderId': user.id\n      };\n      \n      setMessageValue('');\n    \n      let url = `${API_ENDPOINT}/conversation/${CONVERSATION_ID}/message/send`;\n      fetch(url, { \n        method: 'POST',\n        body: JSON.stringify(newMessage) \n      }) \n        .then(res => res.json())\n        .then(msg => {\n          setLastMessageId(msg.id);\n          setMessages([...messages, {\n            ...newMessage, id: msg.id\n          }]);\n          jumpToBottom();\n        })\n    }\n\n    function renderMessages() {\n      if (messages && user) {\n        return messages.map((msg, i) => <Message key={msg.id} msg={msg} />);\n      }\n      return null;\n    }\n\n      return (\n          <React.Fragment>\n            <div className=\"nav\">\n              <div className=\"nav__inner\">\n                <div>Bunq Chat</div>\n                <div className=\"nav__avatar\">\n                  <Avatar userId={user.id}></Avatar>\n                </div>\n              </div>\n            </div>\n              <div className=\"chat\">\n                <form className=\"chat__form\" onSubmit={ev => onSendMessage(ev)}>\n                    <input className=\"chat__form__input\" type=\"text\" value={ messageValue } onChange={ev => setMessageValue(ev.target.value)} />\n                  <input className=\"chat__form__btn\"  type=\"submit\" value=\"Submit\" />\n                </form>\n              { renderMessages() }\n              </div>\n          </React.Fragment>\n      );\n}\n\nexport default Chat;","import React, { useEffect, useContext } from \"react\";\nimport { UserContext } from './App';\nimport { API_ENDPOINT, BUNQ_COLORS } from \"../const\";\n\nfunction Login() {\n    const { setUser, allUsers, setAllUsers } = useContext(UserContext);\n\n    useEffect( () => {\n      fetch(`${API_ENDPOINT}/users`)\n        .then(res => res.json())\n        .then(res => {\n          setAllUsers(res);\n        });\n    }, []);\n\n    function getColorForUser(user) {\n      if (BUNQ_COLORS[user.id-1]) {\n        return BUNQ_COLORS[user.id-1];\n      } else {\n        return 'black';\n      }\n    }\n\n    return (\n      <div>\n        <div className=\"login__title\">Welcome to bunq chat!</div>\n        <div className=\"login__subtitle\">Please select a user</div>\n        <div className=\"login\">\n          { allUsers.map((user, i) => (\n              <div className=\"login__user\" key={i} onClick={() => setUser(user)}>\n                <div className=\"login__avatar\" style={{ 'backgroundColor': getColorForUser(user) }}></div>\n                <span className=\"login__name\">{user.name}</span>\n              </div>\n            )) \n          }\n        </div>\n        <div className=\"footer\">\n          <img className=\"footer__logo\" src={require('../assets/logo.png')}/>\n        </div>\n      </div>\n      );\n}\n\nexport default Login;","import React, { useState } from \"react\";\nimport Chat from './Chat';\nimport Login from './Login';\n\n// user context allows any children to use values in it, like a global variable\nexport const UserContext = React.createContext();\n\nexport default function App () {\n    let [ user, setUser ] = useState(null);\n    let [ allUsers, setAllUsers ] = useState([]);\n    \n    return (\n      <UserContext.Provider value={{user, setUser, allUsers, setAllUsers}}>\n          <div className=\"banner\"></div>\n            { user? <Chat/> : <Login/> }\n      </UserContext.Provider>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}